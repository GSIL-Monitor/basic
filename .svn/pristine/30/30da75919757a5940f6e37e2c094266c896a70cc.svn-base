package com.wgb.controller.mt.member;

import com.wgb.bean.ZLResult;
import com.wgb.controller.mt.MTBaseController;
import com.wgb.dao.Page;
import com.wgb.dubbo.ZLRpcResult;
import com.wgb.exception.ServiceException;
import com.wgb.service.dubbo.mbms.web.ApitMemberReportService;
import com.wgb.util.ArithUtil;
import com.wgb.util.ExcelUtil;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * Created by wgy on 2018/4/19.
 */
@Controller
@RequestMapping("/member/memberReport")
public class MTMemberReportController extends MTBaseController {

    private static final Logger logger = LoggerFactory.getLogger(MTMemberReportController.class);

    @Autowired
    private ApitMemberReportService memberReportService;

    @RequestMapping("/queryMemberConsumeLog")
    @ResponseBody
    public ZLResult queryMemberConsumeLog(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryBuyItemList(params);
        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryBuyItemListExport")
    public void queryBuyItemListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryBuyItemListExport(params);
        // 字段名数组
        String[] members = {"membername", "memberno", "telephone", "branchname", "ticketno",
                "no", "commodityname", "commoditysize", "commodityunit", "actualprice", "saleprice", "num", "sum", "paytype", "cashier", "createtime"};

        // 字段名数组
        String[] memberNames = {"姓名", "会员号", "手机号", "门店", "票号",
                "货号", "品名", "规格", "单位", "原价", "售价", "数量", "金额", "交易方式", "收银员", "交易日期"};

        String menberName = "会员消费明细表";

        ExcelUtil.exportExcel((List<Map<String, Object>>) rpcResult.getData(), members, memberNames, menberName, request, response);
    }


    @RequestMapping("/queryCountCardItemListExport")
    public void queryCountCardItemListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryCountCardItemListExport(params);

        List<Map<String, Object>> dataList = checkRpcResult(rpcResult,params);
        //购买明细-列表
        if ("2".equals(MapUtils.getString(params, "businesstype"))) {
            // 字段名数组
            String[] members = {"countcardnumber", "cardname", "membername", "membertelephone",
                    "buytime", "expiretime", "count", "alreadyconsumecount", "remaincount"};

            // 字段名数组
            String[] memberNames = {"编号", "计次卡名称", "持有会员", "会员号/手机号",
                    "购卡时间", "到期时间", "总次数", "已消费次数", "剩余次数"};

            String menberName = "次卡消费明细表-购买明细";

            ExcelUtil.exportExcel(dataList, members, memberNames, menberName, request, response);
        } else {
            //消费明细-列表

            // 字段名数组
            String[] members = {"countcardnumber", "cardname", "membername", "membertelephone",
                    "buytime", "expiretime", "businesstype", "branchname","createtime", "consumecount"};

            // 字段名数组
            String[] memberNames = {"编号", "计次卡名称", "持有会员", "会员号/手机号",
                    "购卡时间", "到期时间", "类型", "消费门店", "消费时间", "第几次消费"};

            String menberName = "次卡消费明细表-消费明细";

            ExcelUtil.exportExcel(dataList, members, memberNames, menberName, request, response);

        }

    }

    private List<Map<String, Object>> checkRpcResult(ZLRpcResult rpcResult,Map<String, Object>params) {

        List<Map<String, Object>> countcardLogList = (List<Map<String, Object>>) rpcResult.getData();
        for (Map<String, Object> countcardLog : countcardLogList) {
            //购买明细
            if ("0".equals(MapUtils.getString(countcardLog, "countislimited"))) {
                countcardLog.put("alreadyconsumecount", "");
                countcardLog.put("count", "不限");
            } else {
                double alreadyconsumecount = ArithUtil.sub(MapUtils.getDoubleValue(countcardLog, "count"), MapUtils.getDoubleValue(countcardLog, "remaincount"));
                countcardLog.put("alreadyconsumecount", alreadyconsumecount);
            }

            String businesstype =MapUtils.getString(params,"businesstype");
            if ("1".equals(businesstype)) {
                countcardLog.put("businesstype","销售");
            }else if("2".equals(businesstype)){
                countcardLog.put("businesstype","购买");
            }else {
                countcardLog.put("businesstype","退次");
            }

        }

        return countcardLogList;
    }

    @RequestMapping("/queryCountcardConsumeLog")
    @ResponseBody
    public ZLResult queryCountcardConsumeLog(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryCountCardItemList(params);
        return parseRpcResultForData(rpcResult);
    }


    @RequestMapping("/queryMemberCreditLog")
    @ResponseBody
    public ZLResult queryMemberCreditLog(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryCreditItemList(params);
        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryCreditItemListExport")
    public void queryCreditItemListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryCreditItemListExport(params);

        // 字段名数组
        String[] members = {"branchname", "membername", "memberno", "membertype",
                "creditname", "credit", "remaincredit", "createusername", "createtime", "remark"};

        // 字段名数组
        String[] memberNames = {"门店", "姓名", "会员号", "会员类别",
                "消费类型", "本次积分", "本次剩余", "操作员", "操作日期", "备注"};

        String menberName = "会员积分明细表";

        ExcelUtil.exportExcel((List<Map<String, Object>>) rpcResult.getData(), members, memberNames, menberName, request, response);
    }


    @RequestMapping("/queryMemberBirth")
    @ResponseBody
    public ZLResult queryMemberBirth(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryMemberBirthDayList(params);

        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryMemberBirthDayListExport")
    public void queryMemberBirthDayListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryMemberBirthDayListExport(params);
        // 字段名数组
        String[] members = {"name", "memberno", "branchname", "telephone",
                "levelname", "cardno", "birthday"};

        // 字段名数组
        String[] memberNames = {"姓名", "会员号", "门店", "会员手机",
                "会员等级", "会员卡号", "会员生日"};

        String menberName = "会员生日表";

        ExcelUtil.exportExcel((List<Map<String, Object>>) rpcResult.getData(), members, memberNames, menberName, request, response);
    }


    @RequestMapping("/queryMemberRechargeLog")
    @ResponseBody
    public ZLResult queryMemberRechargeLog(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryRechargeItemList(params);
        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryRechargeItemListExport")
    public void queryRechargeItemListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryRechargeItemListExport(params);

        List<Map<String, Object>> dataList = formatRechargeList(rpcResult);

        // 字段名数组
        String[] members = {"membername", "memberno", "branchname", "membertype",
                "createtime", "businessname", "paytype", "paymoney", "remainmoney", "createusername"};

        // 字段名数组
        String[] memberNames = {"姓名", "会员号", "门店", "会员类别",
                "时间", "业务类型", "付款方式", "实付金额", "实时余额", "操作员"};

        String menberName = "会员储值明细表";

        ExcelUtil.exportExcel(dataList, members, memberNames, menberName, request, response);
    }

    private List<Map<String, Object>> formatRechargeList(ZLRpcResult rpcResult) {

        List<Map<String, Object>> memberList =(List<Map<String, Object>>) rpcResult.getData();
        for(Map<String, Object> memberRecharge :memberList){
            String paytype = MapUtils.getString(memberRecharge,"paytype");
            if("60000".equals(paytype)){
                paytype="现金";
            }else if("60101".equals(paytype)){
                paytype="微信扫码";
            } else if("60102".equals(paytype)){
                paytype="微信刷卡";
            }else if("60201".equals(paytype)){
                paytype="支付宝扫码";
            }else if("60202".equals(paytype)){
                paytype="支付宝刷卡";
            } else if("60301".equals(paytype)){
                paytype="会员余额";
            }else if("60302".equals(paytype)){
                paytype="次卡支付";
            }else if("60103".equals(paytype)){
                paytype="微信公众支付";
            }
            memberRecharge.put("paytype",paytype);
        }
        return memberList;

    }


    @RequestMapping("/queryCreditExchange")
    @ResponseBody
    public ZLResult queryCreditExchange(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.queryCreditExchangeList(params);
        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryCreditExchangeListExport")
    public void queryCreditExchangeListExport(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult = memberReportService.queryCreditExchangeListExport(params);
        // 字段名数组
        String[] members = {"commoditycode", "commodityname", "giftcount", "score",
                "starttime", "endtime", "createtime"};

        // 字段名数组
        String[] memberNames = {"礼品编码", "礼品名称", "可兑换数量", "需要积分",
                "开始日期", "结束日期", "创建日期"};

        String menberName = "会员积分兑换表";

        ExcelUtil.exportExcel((List<Map<String, Object>>) rpcResult.getData(), members, memberNames, menberName, request, response);
    }

    @RequestMapping("/exchangeGift")
    @ResponseBody
    public ZLResult exchangeGift(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();

        ZLRpcResult rpcResult = memberReportService.saveExchangeGift(params);
        return parseRpcResultForData(rpcResult);
    }


    @RequestMapping("/updateCreditExchangeForWX")
    @ResponseBody
    public ZLResult exchangeift(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        //定义返回对象
        ZLRpcResult zlRpcResult  = new ZLRpcResult();
        //校验参数
        try {

            if(StringUtils.equals(MapUtils.getString(params,"examineflag"),"0")){//

                memberReportService.updateCreditLogsStatus(params);
                return  ZLResult.Success("兑换成功！");
            }else if(StringUtils.equals(MapUtils.getString(params,"examineflag"),"1")){

                memberReportService.updateCreditExchangeForWX(params);
            }
        }catch (Exception ex){

            //系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }

        //判断返回结果
        if(!zlRpcResult.success()){

            throw  new ServiceException(zlRpcResult.getErrorMsg());
        }

        return ZLResult.Success("拒绝兑换！");
    }

    @RequestMapping("/queryCreditExchangeForWX")
    @ResponseBody
    public ZLResult queryCreditExchangeForWX(HttpServletRequest request, HttpServletResponse response) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        ZLRpcResult rpcResult=memberReportService.queryCreditExchangeForWX(params);

        return parseRpcResultForData(rpcResult);
    }

    @RequestMapping("/queryMemberRechargeCommission")
    @ResponseBody
    public ZLResult queryMemberRechargeCommission(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        // 定义返回对象
        ZLRpcResult zlRpcResult  = new ZLRpcResult();
        try {
            // 系统调用
            zlRpcResult = memberReportService.queryMemberRechargeCommission(params);
        } catch (Exception ex){
            // 系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }
        // 判断返回结果
        if (!zlRpcResult.success()) {
            return ZLResult.Error(zlRpcResult.getErrorMsg());
        }
        Page<?> pageInfo = (Page<?>)zlRpcResult.getData();
        return ZLResult.Success(pageInfo);
    }

    @RequestMapping("/queryConsumeCommission")
    @ResponseBody
    public ZLResult queryConsumeCommission(HttpServletRequest request) {

        //获取入参数据
        Map<String, Object> params =  getParams();
        // 定义返回对象
        ZLRpcResult zlRpcResult  = new ZLRpcResult();
        try {
            // 系统调用
            zlRpcResult = memberReportService.queryConsumeCommission(params);
        } catch (Exception ex){
            // 系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }
        // 判断返回结果
        if (!zlRpcResult.success()) {
            return ZLResult.Error(zlRpcResult.getErrorMsg());
        }
        Page<?> pageInfo = (Page<?>)zlRpcResult.getData();
        return ZLResult.Success(pageInfo);
    }

}
