package com.wgb.controller.mt.wholesale;

import com.wgb.bean.ZLResult;
import com.wgb.controller.mt.MTBaseController;
import com.wgb.dubbo.ZLRpcResult;
import com.wgb.exception.ServiceException;
import com.wgb.service.dubbo.stms.web.ApitWholesaleService;
import com.wgb.util.ExcelUtil;
import org.apache.commons.collections.MapUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Map;

/**
 * Created by wgy on 2018/4/19.
 */
@Controller
@RequestMapping("/wholesale/order")
public class MTWholesaleController extends MTBaseController {

    @Autowired
    private ApitWholesaleService apitWholesaleService;

    @RequestMapping("/wholesalecount")
    @ResponseBody
    public ZLResult wholesalecount(HttpServletRequest request) {
        long startTime = System.currentTimeMillis();

        //获取入参数据
        Map<String, Object> params = getParams();

        //定义返回对象
        ZLRpcResult zlRpcResult = new ZLRpcResult();

        try {

            //系统调用
            zlRpcResult = apitWholesaleService.wholesalecount(params);

        } catch (Exception ex) {

            //系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }

        //判断返回结果
        if (!zlRpcResult.success()) {

            throw new ServiceException(zlRpcResult.getErrorMsg());
        }

        long endTime = System.currentTimeMillis();
        logger.info("wholesalecount 用时:" + (endTime - startTime) + "ms");
        return ZLResult.Success(zlRpcResult.getData());
    }

    /*导出批发销售统计*/
    @RequestMapping("/exportWholesaleCount")
    @ResponseBody
    public ZLResult exportWholesaleCount(HttpServletRequest request, HttpServletResponse response) {
        long startTime = System.currentTimeMillis();

        //获取入参数据
        Map<String, Object> params = getParams();
        //定义返回对象
        ZLRpcResult zlRpcResult = new ZLRpcResult();
        try {
            //系统调用
            zlRpcResult = apitWholesaleService.exportWholesaleCount(params);
            String searchtype = MapUtils.getString(params, "searchtype");
            if ("1".equals(searchtype)) {
                String[] purchase = {"commoditycode", "commodityname", "categoryname", "spec", "unitname",
                        "numbertotal", "amounttotal", "receiptnumstotal", "receiptamounttotal", "returnnumtotal",
                        "returnamounttotal", "giftnumbertotal", "giftamounttotal", "costamounttotal", "profit",
                        "profitrate", "suppliername"};
                String[] purchaseNames = {"货号", "商品名称", "商品类别", "规格", "单位",
                        "数量小计", "金额小计", "销售数量", "销售金额", "退货数量",
                        "退货金额", "赠送数量", "赠送金额", "成本", "毛利",
                        "毛利率", "供应商"};
                String purchaseName = "批发销售统计--商品汇总_";
                ExcelUtil.exportExcel(zlRpcResult.getList(), purchase, purchaseNames, purchaseName, request, response);
            } else if ("2".equals(searchtype)) {
                String[] purchase = {"billcode", "billtype", "customercode", "customername", "branchname",
                        "numbertotal", "amounttotal", "receiptnumstotal", "receiptamounttotal", "returnnumtotal",
                        "returnamounttotal", "giftnumbertotal", "giftamounttotal", "costamounttotal", "profit",
                        "profitrate", "createusername", "createtime", "examineusername", "examinetime", "billremark"
                };
                String[] purchaseNames = {"业务单号", "单据类型", "客户编号", "客户名称", "所属门店",
                        "数量小计", "金额小计", "销售数量", "销售金额", "退货数量",
                        "退货金额", "赠送数量", "赠送金额", "成本", "毛利",
                        "毛利率", "制单人", "制单日期", "审核人", "审核日期", "单据备注"
                };
                String purchaseName = "批发销售统计--单据汇总_";
                ExcelUtil.exportExcel(zlRpcResult.getList(), purchase, purchaseNames, purchaseName, request, response);
            } else {
                String[] purchase = {"billcode", "billtype", "customercode", "customername", "branchname",
                        "commoditycode", "commodityname", "categoryname", "spec", "unitname",
                        "quantity", "receiptprice", "wholesaleamount", "giftnumbertotal", "giftamounttotal",
                        "costamounttotal", "profit", "profitrate", "billremark", "remark"};
                String[] purchaseNames = {"业务单号", "单据类型", "客户编号", "客户名称", "所属门店",
                        "货号", "商品名称", "商品类别", "规格", "单位",
                        "数量", "批发单价", "批发金额", "赠送数量", "赠送金额",
                        "成本", "毛利", "毛利率", "单据备注", "明细备注"};
                String purchaseName = "批发销售统计--明细汇总_";
                ExcelUtil.exportExcel(zlRpcResult.getList(), purchase, purchaseNames, purchaseName, request, response);
            }
        } catch (Exception ex) {
            //系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }
        //判断返回结果
        if (!zlRpcResult.success()) {
            throw new ServiceException(zlRpcResult.getErrorMsg());
        }
        long endTime = System.currentTimeMillis();
        logger.info("导出批发销售统计 用时:" + (endTime - startTime) + "ms");
        return ZLResult.Success(zlRpcResult.getData());
    }

    @RequestMapping("/customersalequery")
    @ResponseBody
    public ZLResult documentSummary(HttpServletRequest request) {
        long startTime = System.currentTimeMillis();

        //获取入参数据
        Map<String, Object> params = getParams();

        //定义返回对象
        ZLRpcResult zlRpcResult = new ZLRpcResult();

        try {

            //系统调用
            zlRpcResult = apitWholesaleService.documentSummary(params);

        } catch (Exception ex) {

            //系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }

        //判断返回结果
        if (!zlRpcResult.success()) {

            throw new ServiceException(zlRpcResult.getErrorMsg());
        }

        long endTime = System.currentTimeMillis();
        logger.info("customersalequery 用时:" + (endTime - startTime) + "ms");
        return ZLResult.Success(zlRpcResult.getData());
    }

    /*导出客户销售查询*/
    @RequestMapping("/exportDocumentSummary")
    @ResponseBody
    public ZLResult exportDocumentSummary(HttpServletRequest request, HttpServletResponse response) {
        long startTime = System.currentTimeMillis();

        //获取入参数据
        Map<String, Object> params = getParams();
        //定义返回对象
        ZLRpcResult zlRpcResult = new ZLRpcResult();
        try {
            //系统调用
            zlRpcResult = apitWholesaleService.exportDocumentSummary(params);
            String searchtype = MapUtils.getString(params, "searchtype");
            if ("1".equals(searchtype)) {
                String[] purchase = {"customercode", "customername",
                        "numbertotal", "amounttotal", "receiptnumstotal", "receiptamounttotal", "returnnumtotal",
                        "returnamounttotal", "giftnumbertotal", "giftamounttotal", "costamounttotal", "profit",
                        "profitrate"};
                String[] purchaseNames = {"客户编号", "客户名称",
                        "数量小计", "金额小计", "销售数量", "销售金额", "退货数量",
                        "退货金额", "赠送数量", "赠送金额", "成本", "毛利",
                        "毛利率"};
                String purchaseName = "客户销售查询--客户汇总_";
                ExcelUtil.exportExcel(zlRpcResult.getList(), purchase, purchaseNames, purchaseName, request, response);
            } else {
                String[] purchase = {"customercode", "customername",
                        "commoditycode", "commodityname", "spec", "unitname",
                        "numbertotal", "amounttotal", "receiptnumstotal", "receiptamounttotal", "returnnumtotal",
                        "returnamounttotal", "giftnumbertotal", "giftamounttotal", "costamounttotal", "profit",
                        "profitrate", "suppliername"};
                String[] purchaseNames = {"客户编号", "客户名称",
                        "货号", "商品名称", "规格", "单位",
                        "数量小计", "金额小计", "销售数量", "销售金额", "退货数量",
                        "退货金额", "赠送数量", "赠送金额", "成本", "毛利",
                        "毛利率", "供应商"};
                String purchaseName = "客户销售查询--商品汇总_";
                ExcelUtil.exportExcel(zlRpcResult.getList(), purchase, purchaseNames, purchaseName, request, response);
            }
        } catch (Exception ex) {
            //系统级别异常
            throw new ServiceException(ServiceException.SYS_ERROR);
        }
        //判断返回结果
        if (!zlRpcResult.success()) {
            throw new ServiceException(zlRpcResult.getErrorMsg());
        }
        long endTime = System.currentTimeMillis();
        logger.info("导出客户销售查询 用时:" + (endTime - startTime) + "ms");
        return ZLResult.Success(zlRpcResult.getData());
    }

}
