package com.wgb.controller.mt.pay;

import com.alibaba.dubbo.common.logger.Logger;
import com.alibaba.dubbo.common.logger.LoggerFactory;
import com.wgb.bean.ZLResult;
import com.wgb.controller.mt.MTBaseController;
import com.wgb.dubbo.ZLRpcResult;
import com.wgb.service.dubbo.mbms.admin.ApiMemberService;
import com.wgb.service.dubbo.pays.web.ApiAliPayService;
import com.wgb.service.dubbo.pays.web.ApiWxPayService;
import com.wgb.service.dubbo.salems.admin.ApiPrepaidcardService;
import com.wgb.util.Contants;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by wgy on 2018/3/22.
 */
@Controller
@RequestMapping("/refund")
public class MTRefundController extends MTBaseController {
    public static final Logger logger = LoggerFactory.getLogger(MTRefundController.class);
    @Autowired
    ApiAliPayService apiAliPayService ;

    @Autowired
    ApiWxPayService apiWxPayService;

    @Autowired
    ApiMemberService apiMemberService;

    @Autowired
    ApiPrepaidcardService apiPrepaidcardService;

    @RequestMapping("/money")
    @ResponseBody
    public ZLResult money(HttpServletRequest request) {
        Map<String, Object> params = getParams();
        String refundtype = MapUtils.getString(params, "refundtype");

        ZLRpcResult zlRpcResult = new ZLRpcResult() ;

        //选择退款种类
        if(StringUtils.isEmpty(refundtype)){
            zlRpcResult.setErrorCode(80000);
            return ZLResult.Error(zlRpcResult.getErrorCode());
        }

        //支付宝退款
        if (StringUtils.equals(Contants.AIPAYREFUNDTYPE, refundtype)) {
            zlRpcResult = apiAliPayService.aliRefund(params);
            if(!zlRpcResult.success()){
                return ZLResult.Error(zlRpcResult.getErrorCode());
            }
        }
        //微信退款
        if (StringUtils.equals(Contants.WXPAYREFUNDTYPE, refundtype)) {
            zlRpcResult = apiWxPayService.wxRefund(params);

            if(!zlRpcResult.success()){
                int errorcode=zlRpcResult.getErrorCode();
                //30029 表示调用退款接口失败，返回微信官方错误描述信息
                if(errorcode==30029){
                    Map<String, Object> result = new HashMap<String, Object>();
                    //result.put("success", "0");
                   // result.put("errcode", errorcode);
                   // result.put("errmsg", zlRpcResult.getErrorMsg());
                    ZLResult.Error(zlRpcResult.getErrorCode());
                }
                return ZLResult.Error(zlRpcResult.getErrorCode());
            }
        }
        //次卡退款
        if (StringUtils.equals(Contants.COUNTREFUNDTYPE, refundtype)) {
            zlRpcResult = apiMemberService.updateCountcardReturnpay(params);
            if(!zlRpcResult.success()){
                return ZLResult.Error(zlRpcResult.getErrorCode());
            }
        }

        //预付卡退款
        if (StringUtils.equals(Contants.PRECARDREFUNDTYPE, refundtype)) {
            zlRpcResult = apiPrepaidcardService.prepaidcardRefund(params);
            if(!zlRpcResult.success()){
                return ZLResult.Error(zlRpcResult.getErrorCode());
            }
        }
        //会员退款
        if (StringUtils.equals(Contants.MEMBERREFUNDTYPE, refundtype)) {
            zlRpcResult = apiMemberService.updateMemberReturnPay(params);
            if(!zlRpcResult.success()){
                return ZLResult.Error(zlRpcResult.getErrorCode());
            }
        }
        return ZLResult.Success(zlRpcResult.getData());
    }
}