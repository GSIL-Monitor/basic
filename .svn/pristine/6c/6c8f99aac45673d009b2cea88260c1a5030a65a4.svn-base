package com.wgb.util.excel.util;


import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.wgb.util.excel.model.ExcelColumn;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.model.WorkbookRecordList;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.servlet.http.HttpServletResponse;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * 自定义
 * 自定义表头的Excel
 */
public class CustomizeToExcel {

	private static String FORMAT_STR = "yyyy-MM-dd";



	/**
	 * 获取工作簿对象
	 * 
	 * @param columns
	 *            List<ExcelColumn> 列定义
	 * @param list
	 *            List<Map<String, Object>> 数据
	 * @return Workbook
	 * @throws IOException
	 */
	public static <T> Workbook getWorkbook(List<ExcelColumn> columns, List<Map<String ,Object>> list) throws IOException, InterruptedException {
		return getWorkbook(JsonUtils.toJson(columns), list);
	}

	/**
	 * 获取工作簿对象
	 * 
	 * @param columnsJsonArray
	 *            String 列定义
	 * @param list
	 *            List<Map<String, Object>> 数据
	 * @return Workbook
	 * @throws IOException
	 */
	public static Workbook getWorkbook(String columnsJsonArray, List<Map<String ,Object>> list) throws IOException, InterruptedException {
		Workbook wb = new HSSFWorkbook();
		Sheet sheet = wb.createSheet();
		List<String> fields = new ArrayList<String>();

		JSONArray array = JSONArray.parseArray(columnsJsonArray);
		// 写标题
		writeTitles(array, 0, null ,sheet ,wb ,fields);
		// 合并列
		mergeColumns(sheet);
		// 合并行
		mergeRows(sheet);

		// 写入行分隔符
		writeDelimiter(wb, sheet);

		// 冻结表头
		freezeTitle(sheet);
		// 写数据
		writeData(list, wb, sheet , fields);


		return wb;
	}

	/**
	 * 冻结表头
	 */
	private static void freezeTitle(Sheet sheet) {
		int rowsCount = sheet.getPhysicalNumberOfRows();
		sheet.createFreezePane(0, rowsCount - 1);
	}

	/**
	 * 写入到文件
	 * 
	 * @param columnsJsonArray
	 *            String 列定义
	 * @param list
	 *            List<Map<String, Object>> 数据
	 * @param filePath
	 *            文件路径
	 * @throws Exception
	 */
	public static <T> void toFile(String columnsJsonArray, List<Map<String ,Object>> list, String filePath ,Workbook wb) throws Exception {
		FileOutputStream out = null;
		try {
			getWorkbook(columnsJsonArray, list);
			out = new FileOutputStream(filePath);
			wb.write(out);
			out.close();
		} catch (Exception e) {
			throw e;
		} finally {
			if (out != null) {
				out.close();
			}
		}
	}

	/**
	 * http导出Excel文件
	 * @param columns
	 * @param list
	 * @param fileName
	 * @throws Exception
	 */
	public static void exportExcel(HttpServletResponse response , List<ExcelColumn> columns, List<Map<String ,Object>> list, String fileName) throws Exception {
		response.reset();
		if (!StringUtils.endsWith(fileName, ".xls")) {
			fileName += ".xls";
		}
		// 定义输出类型
		response.setContentType("application/msexcel");
		OutputStream os = null;
		try {
			response.setHeader("Content-disposition", "attachment; filename=" + new String(fileName.getBytes("gbk"), "iso8859-1"));
			os = response.getOutputStream();
			Workbook xls = CustomizeToExcel.getWorkbook(columns, list);
			xls.write(os);
			os.flush();
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception(e.getMessage());
		} finally {
			if(null != os){
				try {
					os.close();
				} catch (IOException e) {
					e.printStackTrace();
					throw new Exception(e.getMessage());
				}
			}
		}
	}

	/**
	 * 写入行数据
	 * 
	 * @param list
	 */
	private static void writeData(List<Map<String ,Object>> list , Workbook wb,Sheet sheet ,List<String> fields) {
		// 行数
		int rowsCount = sheet.getPhysicalNumberOfRows();
		// 列数
		int colsCount = sheet.getRow(0).getPhysicalNumberOfCells();
		Row row;
		Cell cell;
		CellStyle dateCs = wb.createCellStyle();
		// 水平居中
		dateCs.setAlignment(CellStyle.ALIGN_CENTER);
		// 垂直居中
		dateCs.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		// 字体样式
		Font font = wb.createFont();
		// 设置字体大小
		font.setFontHeightInPoints((short) 11);
		// 设置字体微软雅黑
		font.setFontName("微软雅黑");
		// 设置字体
		dateCs.setFont(font);

		if (null != list && list.size() > 0) {
			for (int r = 0; r < list.size(); r++) {
				row = sheet.createRow(r + rowsCount - 1);
                Map<String, Object> writeDate = list.get(r);

                for (int c = 0; c < colsCount; c++) {
					cell = row.createCell(c);
					cell.setCellStyle(dateCs);
					String field = fields.get(c);
					if (StringUtils.isNotBlank(field) && writeDate.containsKey(field)) {
						try {
							Object v = writeDate.get(field);
							if (v == null) {
								cell.setCellValue("");
							} else {
								if (v.getClass().equals(Date.class)) {
									SimpleDateFormat sdf = new SimpleDateFormat(FORMAT_STR);
									cell.setCellValue(sdf.format((Date) v));
								} else {
									cell.setCellValue(v.toString());
								}
							}
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}

	/**
	 * 写入列头下分隔符
	 */
	private static void writeDelimiter(Workbook wb ,Sheet sheet) {

		// 行数
		int rowsCount = sheet.getPhysicalNumberOfRows();
		// 列数
		int colsCount = sheet.getRow(0).getPhysicalNumberOfCells();
		Cell cell;
		CellStyle cs = wb.createCellStyle();
		Row row = sheet.createRow(rowsCount);
		for (int c = 0; c < colsCount; c++) {
			cell = row.createCell(c);
			cs.setBorderTop(CellStyle.BORDER_DASHED);
			cell.setCellStyle(cs);
		}

	}

	/**
	 * 合并行
	 */
	private static void mergeRows(Sheet sheet) {
		// 行数
		int rowsCount = sheet.getPhysicalNumberOfRows();
		// 列数
		int colsCount = sheet.getRow(0).getPhysicalNumberOfCells();
		Row row = null;

		Cell cell = null;
		int rowSpan = 0;
		for (int c = 0; c < colsCount; c++) {
			rowSpan = 0;
			for (int r = rowsCount - 1; r > -1; r--) {

				row = sheet.getRow(r);

				cell = row.getCell(c);

				if (cell != null && r == rowsCount - 1) {
					break;
				} else if (cell != null && r != rowsCount - 1) {
					// 合并列
					sheet.addMergedRegion(new CellRangeAddress(rowsCount - rowSpan - 1, rowsCount - 1, c, c));
					break;
				} else {
					// 行合并数+1
					rowSpan++;
				}
			}
		}
	}

	/**
	 * 合并列
	 */
	private static void mergeColumns(Sheet sheet) {
		// 行数
		int rowsCount = sheet.getPhysicalNumberOfRows();
		// 列数
		int colsCount = sheet.getRow(0).getPhysicalNumberOfCells();

		Row row = null;
		Cell cell1 = null;
		Cell cell2 = null;

		int colSpan = 0;

		for (int r = 0; r < rowsCount; r++) {
			// 重置
			colSpan = 0;
			row = sheet.getRow(r);
			for (int c = 0; c < colsCount; c++) {
				cell1 = row.getCell(c);
				cell2 = row.getCell(c + 1);
				if (cell1 == null) {// 如果当前单元格是空的，跳过，继续当前行的后一个单元格查找
					if (c == colsCount - 1) {
						break;
					} else {
						continue;
					}
				}
				if (cell2 == null) {// 说明当前行已经到最后一个单元格了
					if (colSpan >= 1) {// 判断colSpan是否大于等于1，大于1就要合并了
						// 合并行中连续相同的值的单元格
						sheet.addMergedRegion(new CellRangeAddress(r, r, c - colSpan, c));
						break;
					}
				}

				if (cell2 != null) {
					// 如果当前单元格和下一个单元格内容相同，那么colSpan加1
					if (cell1.getStringCellValue().equals(cell2.getStringCellValue())) {
						colSpan++;
					} else {
						// 如果当前单元格和下一个不等，那么判断colSpan是否大于等于1
						if (colSpan >= 1) {
							// 合并行中连续相同的值的单元格
							sheet.addMergedRegion(new CellRangeAddress(r, r, c - colSpan, c));
							// 合并后重置colSpan
							colSpan = 0;
							continue;
						}
					}
				}

			}
		}

	}

	/**
	 * 写入标题
	 * 
	 * @param array
	 *            JSON数组
	 * @param rowIndex
	 *            行号
	 * @param parentTitle
	 *            父节点名称
	 */
	private static void writeTitles(JSONArray array, int rowIndex, String parentTitle , Sheet sheet , Workbook wb , List<String> fields) {
		Iterator<Object> it = array.iterator();
		Row row = sheet.getRow(rowIndex) == null ? sheet.createRow(rowIndex) : sheet.getRow(rowIndex);
		Row lastRow = rowIndex == 0 ? null : sheet.getRow(rowIndex - 1);

		int _colIndex = -1;
		// 遍历当前行，获取行最多的单元格的个数，因为如果之前行之前有单元格是空的，会对列索引造成问题
		int currentMaxColumns = 0;
		for (int x = 0; x < rowIndex; x++) {
			Row rr = sheet.getRow(x);
			if (rr.getPhysicalNumberOfCells() > currentMaxColumns) {
				currentMaxColumns = rr.getPhysicalNumberOfCells();
			}
		}

		// 查找上一级的列开始位置
		if (lastRow != null && parentTitle != null) {
			for (int i = 0; i < currentMaxColumns; i++) {
				if (lastRow.getCell(i) != null && lastRow.getCell(i).getStringCellValue() != null && lastRow.getCell(i).getStringCellValue().equals(parentTitle)) {
					_colIndex = i;
					break;
				}
			}
		}
		_colIndex = _colIndex == -1 ? 0 : _colIndex;

		Cell cell;
		CellStyle cs = wb.createCellStyle();
		// 水平居中
		cs.setAlignment(CellStyle.ALIGN_CENTER);
		// 垂直居中
		cs.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		// 字体样式
		Font font = wb.createFont();
		// 设置字体大小
		font.setFontHeightInPoints((short) 13);
		// 设置字体微软雅黑
		font.setFontName("微软雅黑");
		// 设置字体
		cs.setFont(font);
		while (it.hasNext()) {
			JSONObject e = (JSONObject) it.next();
			// 是否是叶子节点
			boolean isLeaf = false;
			// 获取子节点数量
			int count = getSubNodesCount(e);
			// 没有子节点就是叶子节点，如果子节点为0，将count设置为1，是为了能够让下面的for循环执行一次，将标题写入
			if (count == 0) {
				count = 1;
				isLeaf = true;
			} else {
				isLeaf = false;
			}
			// 根据子节点的数量，写入相应数量的父节点的名称，待完成后合并列
			for (int i = 0; i < count; i++) {
				cell = row.createCell(_colIndex++);
				if (isLeaf) {

					// 如果没有子节点，就是浅红色的
					// cs.setFillForegroundColor(HSSFColor.WHITE.index);
					if (e.get("width") != null && e.getIntValue("width") != 0) {

						fields.add(e.getString("field"));

						// 设置列宽，列宽是根据叶子节点来的，其他地方定义不生效,l列索引由于上面已经+1了，所以这里要减1
						sheet.setColumnWidth(_colIndex - 1, e.getIntValue("width") * 256);
					}
				}

				cell.setCellStyle(cs);
				cell.setCellValue(e.getString("title"));
				// 判断是否写到最后一个父节点名称
				if (i == count - 1) {
					// 如果有子节点,递归写入子节点
					if (e.get("children") != null && e.getJSONArray("children").size() != 0) {
						writeTitles(e.getJSONArray("children"), rowIndex + 1, e.getString("title") ,sheet ,wb ,fields);
					}
				}

			}

		}
	}

	/**
	 * 获取当前节点的子节点数量
	 * @param e
	 * @return
	 */
	private static int getSubNodesCount(JSONObject e) {
		JSONArray array = e.get("children") == null ? null : e.getJSONArray("children");
		if (array == null)
			return 0;
		Iterator<Object> it = array.iterator();
		int count = array.size();
		while (it.hasNext()) {
			int c = getSubNodesCount((JSONObject) it.next());
			count += c > 0 ? c - 1 : c;
		}
		return count;
	}
}